(* Message Resource *)

resource = [ res_head ]
           { group | res_message | res_comment | empty_line }

res_head = { res_comment | res_meta | empty_line } empty_line
group = group_path { sp } nl
        ( "-" "-" "-" { "-" } | "=" "=" "=" { "=" } ) { sp } nl
        [ res_head ]
res_comment = comment { sp } nl
res_meta = msg_meta { sp } nl
group_path = literal { { sp } "." { sp } literal }

comment = comment_block | comment_line
comment_block = "#" "#" "#" { cb_char } "#" "#" "#"
cb_char = ? any_char, but with no ("#" "#" "#") sequences ?
comment_line = "#" { any_char - nl }

empty_line = { sp } nl

(* Message within resource *)

res_message = { comment { sp } nl }
              { ( msg_meta | msg_alias ) { sp } nl }
              msg_key { sp } msg_body
              { sp } nl
msg_meta = "@" literal { sp } ( ":" | "=" ) { sp } literal
msg_alias = "*" literal { sp } ( ":" | "=" ) { sp } ( literal | placeholder )
msg_key = literal
msg_body = select | "=" { sp } pattern
select = select_head
         { sp } "=" { sp } nl
         { sp { sp } select_case }

(* One message by itself *)

one_message = { comment wsc { wsc } }
              { ( msg_meta | msg_alias ) wsc { wsc } }
              ( one_select | one_pattern )
wsc = ws | ","
one_select = select_head
             { ws } "=" { ws }
             { one_select_case }
one_select_case = { comment ws { ws } }
                  select_key { ws }
                  { meta ws { ws } }
                  one_case_value
one_case_value = ? pattern, but with no unescaped "[" characters ?
one_pattern = ? pattern, but a first msg_literal must start with a word or escaped_char ?

(* Select message *)

select_head = "[" { sp } selector { { sp } "," { sp } selector } "]"
selector = [ "*" word { ws } ( ":" | "=" ) { ws } ]
           ( quoted_literal | variable | function | msgref | alias )
           [ { sp } "=" { sp } literal ]

select_case = { comment { sp } nl sp { sp } }
              select_key { sp }
              { msg_meta { sp } nl sp { sp } }
              select_value nl
select_key = "[" { sp } literal { { sp } "," { sp } literal } "]"
select_value = ? like pattern, but with no ( nl { sp } "[" ) sequences ?

(* Pattern message *)

pattern = { msg_literal | placeholder | element }

msg_literal = { msg_literal_char }
msg_literal_char = any_char - ( "{" | "<" | esc )
                 | escaped_char

placeholder = "{" { ws }
              [ "*" word { ws } ( ":" | "=" ) { ws } ]
              ( quoted_literal | variable | function | msgref | alias )
              { ws { ws } ( meta | comment ) }
              { ws } "}"

word = word_char { word_char }
argument = literal | variable | alias
option = literal { ws } ( ":" | "=" ) { ws } argument
meta = "@" literal { ws } ( ":" | "=" ) { ws } literal

literal = word | quoted_literal
quoted_literal = '"' { any_char - '"' } '"'

variable = "$" var_path
var_path = var_part { { sp } "." { sp } var_part }
var_part = literal | "{" { sp } variable { sp } "}"

function = word
           { ws { ws } ( argument | comment ) }
           { ws { ws } ( option | comment ) }

msgref = "-" [ literal ":" ] var_path
         { ws { ws } ( option | comment ) }

alias = "*" word

element = "<" { ws } word
          { ws { ws } ( argument | comment ) }
          { ws { ws } ( option | comment ) }
          { ws { ws } ( meta | comment ) }
          { ws } [ "/" ] ">"
        | "<" "/" { ws } word { ws comment } { ws } ">"

(* Characters *)

escaped_char = esc "{" | esc "}"
             | esc "<" | esc ">"
             | esc "[" | esc "]"
             | esc '"'
             | esc "n" | esc "r"
             | esc "t" | esc " "
             | esc "u" hex hex hex hex
             | esc "u" "{" hex { hex } "}"
             | esc esc
esc = "\\"
hex = \p{Hex_Digit}

word_char = \p{Letter} | \p{Number} | "_"
any_char = \p{Any}

(* White space *)

ws = sp | nl
nl = "\n" | "\r" "\n" | EOF
sp = " " | "\t"
